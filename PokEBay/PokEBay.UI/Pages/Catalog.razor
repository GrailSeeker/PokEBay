@page "/catalog"

@using PokEBay.UI.Infrastructure.Catalog.DTO;
@using PokEBay.UI.Infrastructure.Catalog;

@using PokEBay.UI.Infrastructure.Basket.DTO;
@using PokEBay.UI.Infrastructure.Basket;

@inject IBasketService _basketService;
@inject ICatalogService _catalogService;

<div class="container-fluid">
    <h2>Catalog</h2>
</div>

@if (!string.IsNullOrEmpty(_error))
{
    @if (!string.IsNullOrEmpty(_error))
    {
        <div class="alert alert-warning" role="alert">
            @_error
        </div>
    }
}

@if (_loading)
{
    <Loader></Loader>
}

@if (catalogItems != null)
{
    <div class="container-fluid">
        <div class="row mb-2">
            @foreach (var item in catalogItems)
            {
                <div class="col-md-3">
                    <div class="card mt-2" style="height:40rem;">
                        <img class="card-img-top" src=@item.PictureUri alt="Pic" height="250">
                        <div class="card-body">

                            <h4 class="card-title">@item.Name</h4>

                            <p class="card-text">@item.Description</p>

                            <div class="mt-2">
                                <span class="badge badge-info" style="margin-left: 0.5em">@item.Category</span>
                            </div>

                            <div>
                                @foreach (var itemType in item.Type.Split(","))
                                {
                                    <span class="badge badge-warning" style="margin-left: 0.5em">@itemType</span>
                                }
                            </div>

                            <div>
                                @foreach (var weakness in item.Weaknesses.Split(","))
                                {
                                    <span class="badge badge-danger" style="margin-left: 0.5em">@weakness</span>
                                }
                            </div>

                            <h4 class="card-text mt-4">$ @item.Price</h4>

                            <button type="button" class="btn btn-primary mt-2" @onclick="@(() => AddItemToBasketAsync(@item))">
                                <span class="oi oi-cart" aria-hidden="true">&nbsp;</span> Add to basket
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {

    string _error;
    bool _loading = true;

    IEnumerable<CatalogItemDto> catalogItems;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            catalogItems = await _catalogService.GetCatalogItemsAsync();

            if (catalogItems == null)
            {
                _error = "No items found in the catalog.";
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }

    private async Task AddItemToBasketAsync(CatalogItemDto catalogItem)
    {
        _loading = true;
        _error = string.Empty;

        var basketItemDto = new BasketItemDto
        {
            Id = catalogItem.Id,
            Description = catalogItem.Description,
            Name = catalogItem.Name,
            PictureUri = catalogItem.PictureUri,
            Price = catalogItem.Price,
            Category = catalogItem.Category,
            Type = catalogItem.Type,
            Weaknesses = catalogItem.Weaknesses
        };

        try
        {
            await _basketService.AddToBasketAsync(basketItemDto);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }

}
