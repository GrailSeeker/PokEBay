@page "/basket"

@using PokEBay.UI.Infrastructure.Basket.DTO;
@using PokEBay.UI.Infrastructure.Basket;

@using PokEBay.UI.Infrastructure.Orders.DTO;
@using PokEBay.UI.Infrastructure.Orders;

@inject IOrderService _orderService;
@inject IBasketService _basketService;

<h3>Basket</h3>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert-danger">
        @_error
    </div>
}

@if (_loading)
{
    <div class="container">
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-info" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
}

@if (basketItems != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                @*<th>Id</th>*@
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in basketItems)
            {
                <tr>
                    <td><img src="@item.PictureUri" alt="Image not found" height="100" width="100"></td>
                    @*<td>@item.Id</td>*@
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Price</td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <button class="btn btn-info btn-sm shadow" @onclick="PlaceOrderAsync">Place Order</button>
        <button class="btn btn-info btn-sm shadow" @onclick="ClearBasketAsync">Clear Basket</button>
    </div>
}

@code {

    string _error;
    bool _loading = true;

    IEnumerable<BasketItemDto> basketItems;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            basketItems = await _basketService.GetItemsFromBasketAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }

    private async Task ClearBasketAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            await _basketService.ClearBasketAsync();

            basketItems = await _basketService.GetItemsFromBasketAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }

    private async Task PlaceOrderAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            var orderItemDtoList = new List<OrderItemDto>();

            foreach (var item in basketItems)
            {
                var orderItemDto = new OrderItemDto
                {
                    Id = item.Id,
                    Name = item.Name,
                    Description = item.Description,
                    PictureUri = item.PictureUri,
                    Price = item.Price
                };

                orderItemDtoList.Add(orderItemDto);
            }

            await _orderService.CreateOrderAsync(orderItemDtoList);

            await ClearBasketAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }
}
