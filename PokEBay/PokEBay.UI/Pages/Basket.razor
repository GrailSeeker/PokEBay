@page "/basket"

@using PokEBay.UI.Infrastructure.Basket.DTO;
@using PokEBay.UI.Infrastructure.Basket;

@using PokEBay.UI.Infrastructure.Orders.DTO;
@using PokEBay.UI.Infrastructure.Orders;

@inject IOrderService _orderService;
@inject IBasketService _basketService;

<div class="container-fluid">
    <h2>Basket</h2>
    <h4 class="text-muted">$ @basketValue</h4>
</div>


@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-warning" role="alert">
        @_error
    </div>
}

@if (_loading)
{
    <Loader></Loader>
}

@if (basketItems != null)
{
<div class="container-fluid">
    <div class="row mb-2">
        @foreach (var item in basketItems)
        {
            <div class="col-md-3">
                <div class="card mt-2">
                    <img class="card-img-top" src=@item.PictureUri alt="Pic" height="250">
                    <div class="card-body">

                        <h4 class="card-title">@item.Name</h4>

                        <div class="mt-2">
                            <span class="badge badge-info" style="margin-left: 0.5em">@item.Category</span>
                        </div>

                        <div>
                            @foreach (var itemType in item.Type.Split(","))
                            {
                                <span class="badge badge-warning" style="margin-left: 0.5em">@itemType</span>
                            }
                        </div>

                        <div>
                            @foreach (var weakness in item.Weaknesses.Split(","))
                            {
                                <span class="badge badge-danger" style="margin-left: 0.5em">@weakness</span>
                            }
                        </div>

                        <h4 class="card-text mt-4">$ @item.Price</h4>

                        <small class="text-muted mt-4">Added on @item.CreatedOn.ToShortDateString()</small>

                    </div>
                </div>
            </div>
        }
    </div>

    <div class="mt-4">
        <button class="btn btn-info btn-sm shadow" @onclick="PlaceOrderAsync">Place Order</button>
        <button class="btn btn-info btn-sm shadow" @onclick="ClearBasketAsync">Clear Basket</button>
    </div>
</div>
}

@code {

    string _error;
    bool _loading = true;


    IEnumerable<BasketItemDto> basketItems;
    decimal basketValue;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            basketItems = await _basketService.GetItemsFromBasketAsync();

            if (basketItems == null)
            {
                basketValue = 0;
                _error = "No items found in the basket.";
            }
            else
            {
                basketValue = basketItems.Sum(bi => bi.Price);
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }

    private async Task ClearBasketAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            await _basketService.ClearBasketAsync();

            basketItems = await _basketService.GetItemsFromBasketAsync();

            if (basketItems == null)
            {
                _error = "Basket cleared!";
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        basketValue = 0;
        _loading = false;
    }

    private async Task PlaceOrderAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            var orderItemDtoList = new List<OrderItemDto>();

            foreach (var item in basketItems)
            {
                var orderItemDto = new OrderItemDto
                {
                    Id = item.Id,
                    Name = item.Name,
                    Description = item.Description,
                    PictureUri = item.PictureUri,
                    Price = item.Price,
                    Type = item.Type,
                    Category = item.Category,
                    Weaknesses = item.Weaknesses
                };

                orderItemDtoList.Add(orderItemDto);
            }

            await _orderService.CreateOrderAsync(orderItemDtoList);

            await ClearBasketAsync();

            _error = "Order placed! No more items in the basket.";

            basketValue = 0;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }
}
