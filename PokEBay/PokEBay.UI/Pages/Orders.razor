@page "/orders"

@using PokEBay.UI.Infrastructure.Orders.DTO;
@using PokEBay.UI.Infrastructure.Orders;

@inject IOrderService _orderService;

<div class="container-fluid">
    <h2>Orders</h2>
</div>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-warning" role="alert">
        @_error
    </div>
}

@if (_loading)
{
    <Loader></Loader>
}

@if (orders != null)
{
    @foreach (var order in orders)
    {
        <div class="container-fluid mt-4">

            <div class="alert alert-success" role="alert">                
                <h4 class="alert-heading">Order# @order.Id</h4>
                <p>Created On: @order.CreatedOn.ToShortDateString()</p>
                <p>Value: $ @order.GetTotal()</p>
            </div>

            <div class="row mb-2">
                @foreach (var item in order.OrderItems)
                {
                    <div class="col-md-3">
                        <div class="card mt-2">
                            <img class="card-img-top" src=@item.PictureUri alt="Pic" height="250">
                            <div class="card-body">

                                <h4 class="card-title">@item.Name</h4>

                                <div class="mt-2">
                                    <span class="badge badge-info" style="margin-left: 0.5em">@item.Category</span>
                                </div>

                                <div>
                                    @foreach (var itemType in item.Type.Split(","))
                                    {
                                        <span class="badge badge-warning" style="margin-left: 0.5em">@itemType</span>
                                    }
                                </div>

                                <div>
                                    @foreach (var weakness in item.Weaknesses.Split(","))
                                    {
                                        <span class="badge badge-danger" style="margin-left: 0.5em">@weakness</span>
                                    }
                                </div>

                                <h4 class="card-text mt-4">$ @item.Price</h4>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <hr class="mt-4" />

        </div>
    }
}

@code {
    string _error;
    bool _loading = true;

    IEnumerable<OrderDto> orders;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _error = string.Empty;

        try
        {
            orders = await _orderService.GetOrdersAsync();

            if (orders == null)
            {
                _error = "No orders found!";
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        _loading = false;
    }
}
